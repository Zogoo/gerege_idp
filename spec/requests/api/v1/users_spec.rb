require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/users", type: :request do
  let!(:tenant) { create(:tenant, tenant_mode: :single) }
  let!(:user) { create(:user, tenant: tenant) }
  let!(:application) { create(:doorkeeper_application) }
  let!(:token) { create(:doorkeeper_access_token, application: application, resource_owner_id: user.id) }
  let(:headers) { { "Authorization" => "Bearer #{token.token}", "ACCEPT" => "application/json" } }

  let(:valid_attributes) do
    {
      email: Faker::Internet.email,
      password: 'password123',
      tenant_id: tenant.id
    }
  end

  let(:invalid_attributes) do
    {
      email: '',
      password: '',
      tenant_id: nil
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      create(:user, tenant: tenant)
      get api_v1_users_url, headers: headers
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      u = create(:user, tenant: tenant)
      get api_v1_user_url(u), headers: headers
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "is not implemented for API (skipped)" do
      skip "new is not implemented for API endpoints"
    end
  end

  describe "GET /edit" do
    it "is not implemented for API (skipped)" do
      skip "edit is not implemented for API endpoints"
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new User and returns JSON" do
        attrs = valid_attributes.merge(email: Faker::Internet.unique.email)
        expect {
          post api_v1_users_url, params: { api_v1_user: attrs }, headers: headers
        }.to change(User, :count).by(1)
        expect(response).to have_http_status(:created)
        expect(response.content_type).to include("application/json")
      end
    end

    context "with invalid parameters" do
      it "does not create a new User and returns 422" do
        expect {
          post api_v1_users_url, params: { api_v1_user: invalid_attributes }, headers: headers
        }.not_to change(User, :count)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        { email: Faker::Internet.email }
      end

      it "updates the requested user and returns JSON" do
        u = create(:user, tenant: tenant)
        patch api_v1_user_url(u), params: { api_v1_user: new_attributes }, headers: headers
        u.reload
        expect(u.email).to eq(new_attributes[:email])
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to include("application/json")
      end
    end

    context "with invalid parameters" do
      it "returns 422 for invalid update" do
        u = create(:user, tenant: tenant)
        patch api_v1_user_url(u), params: { api_v1_user: invalid_attributes }, headers: headers
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested user and returns 204" do
      u = create(:user, tenant: tenant)
      expect {
        delete api_v1_user_url(u), headers: headers
      }.to change(User, :count).by(-1)
      expect(response).to have_http_status(:no_content)
    end
  end
end
